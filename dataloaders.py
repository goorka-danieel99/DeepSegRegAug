# -*- coding: utf-8 -*-
"""dataloaders.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yjzi7MZxKe-CMi0gA2XCyQazKFWTPwiF
"""

import numpy as np
import torch
import SimpleITK as sitk
import random

class SegLoader(torch.utils.data.Dataset):
  def __init__(self, images, masks):
    self.images = images
    self.masks = masks
    
    assert len(images) == len(masks)
  
  def __getitem__(self, i):
    image = sitk.GetArrayFromImage(sitk.ReadImage(self.images[i]))
    mask = sitk.GetArrayFromImage(sitk.ReadImage(self.masks[i]))

    mask1 = np.where(mask == 1, mask, 0)
    mask2 = np.where(mask == 2, 1, 0) 

    image = (image - image.min()) / (image.max() - image.min())

    image = torch.from_numpy(image.astype(np.float32))[:,:,:].unsqueeze(0)
    mask1 = torch.from_numpy(mask1.astype(np.float32))[:,:,:].unsqueeze(0)
    mask2 = torch.from_numpy(mask2.astype(np.float32))[:,:,:].unsqueeze(0)

    
    return image, mask1, mask2

  def __len__(self):
    return len(self.images)

class RegLoader(torch.utils.data.Dataset):
  def __init__(self, pairs):
    self.pairs = pairs
    self.iterations = 500
  
  def __getitem__(self, i):

    i = random.randint(0,len(self.pairs)-1)

    fixed_image = sitk.GetArrayFromImage(sitk.ReadImage(self.pairs[i][0]))
    moving_image = sitk.GetArrayFromImage(sitk.ReadImage(self.pairs[i][1]))


    fixed_image = (fixed_image - fixed_image.min()) / (fixed_image.max() - fixed_image.min())
    moving_image = (moving_image - moving_image.min()) / (moving_image.max() - moving_image.min())

    fixed_image = torch.from_numpy(fixed_image.astype(np.float32))[:,:,:].unsqueeze(0)
    moving_image = torch.from_numpy(moving_image.astype(np.float32))[:,:,:].unsqueeze(0)

    return fixed_image, moving_image

  def __len__(self):
    return self.iterations

class RegSegLoader(torch.utils.data.Dataset):
  def __init__(self, img_pairs, masks_pairs):
    self.img_pairs = img_pairs
    self.masks_pairs = masks_pairs
    self.iterations = 500
  
  def __getitem__(self, i):

    i = random.randint(0,len(self.img_pairs)-1)

    fixed_image = sitk.GetArrayFromImage(sitk.ReadImage(self.img_pairs[i][0]))
    moving_image = sitk.GetArrayFromImage(sitk.ReadImage(self.img_pairs[i][1]))

    fixed_mask = sitk.GetArrayFromImage(sitk.ReadImage(self.masks_pairs[i][0]))
    moving_mask = sitk.GetArrayFromImage(sitk.ReadImage(self.masks_pairs[i][1]))

    fixed_mask1 = np.where(fixed_mask == 1, fixed_mask, 0)
    fixed_mask2 = np.where(fixed_mask == 2, 1, 0) 
    
    moving_mask1 = np.where(moving_mask == 1, moving_mask, 0)
    moving_mask2 = np.where(moving_mask == 2, 1, 0) 

    fixed_image = (fixed_image - fixed_image.min()) / (fixed_image.max() - fixed_image.min())
    moving_image = (moving_image - moving_image.min()) / (moving_image.max() - moving_image.min())

    fixed_image = torch.from_numpy(fixed_image.astype(np.float32))[:,:,:].unsqueeze(0)
    moving_image = torch.from_numpy(moving_image.astype(np.float32))[:,:,:].unsqueeze(0)
    fixed_mask1 = torch.from_numpy(fixed_mask1.astype(np.float32))[:,:,:].unsqueeze(0)
    moving_mask1 = torch.from_numpy(moving_mask1.astype(np.float32))[:,:,:].unsqueeze(0)
    fixed_mask2 = torch.from_numpy(fixed_mask2.astype(np.float32))[:,:,:].unsqueeze(0)
    moving_mask2 = torch.from_numpy(moving_mask2.astype(np.float32))[:,:,:].unsqueeze(0)

    return fixed_image, moving_image, fixed_mask1, moving_mask1, fixed_mask2, moving_mask2

  def __len__(self):
    return self.iterations

class ValLoader(torch.utils.data.Dataset):
  def __init__(self, img_pairs, masks_pairs):
    self.img_pairs = img_pairs
    self.masks_pairs = masks_pairs
  
  def __getitem__(self, i):

    fixed_image = sitk.GetArrayFromImage(sitk.ReadImage(self.img_pairs[i][0]))
    moving_image = sitk.GetArrayFromImage(sitk.ReadImage(self.img_pairs[i][1]))

    fixed_mask = sitk.GetArrayFromImage(sitk.ReadImage(self.masks_pairs[i][0]))
    moving_mask = sitk.GetArrayFromImage(sitk.ReadImage(self.masks_pairs[i][1]))

    fixed_mask1 = np.where(fixed_mask == 1, fixed_mask, 0)
    fixed_mask2 = np.where(fixed_mask == 2, 1, 0) 
    
    moving_mask1 = np.where(moving_mask == 1, moving_mask, 0)
    moving_mask2 = np.where(moving_mask == 2, 1, 0) 

    fixed_image = (fixed_image - fixed_image.min()) / (fixed_image.max() - fixed_image.min())
    moving_image = (moving_image - moving_image.min()) / (moving_image.max() - moving_image.min())

    fixed_image = torch.from_numpy(fixed_image.astype(np.float32))[:,:,:].unsqueeze(0)
    moving_image = torch.from_numpy(moving_image.astype(np.float32))[:,:,:].unsqueeze(0)
    fixed_mask1 = torch.from_numpy(fixed_mask1.astype(np.float32))[:,:,:].unsqueeze(0)
    moving_mask1 = torch.from_numpy(moving_mask1.astype(np.float32))[:,:,:].unsqueeze(0)
    fixed_mask2 = torch.from_numpy(fixed_mask2.astype(np.float32))[:,:,:].unsqueeze(0)
    moving_mask2 = torch.from_numpy(moving_mask2.astype(np.float32))[:,:,:].unsqueeze(0)

    return fixed_image, moving_image, fixed_mask1, moving_mask1, fixed_mask2, moving_mask2

  def __len__(self):
    return len(self.img_pairs)