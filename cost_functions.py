# -*- coding: utf-8 -*-
"""cost_functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BdTtqRp_0cKwZT_fXKMCx41rhdpUt4AF
"""

import torch
import torch.nn as nn
import numpy as np
import torch.nn.functional as F

def diffusion(ddf, device="cuda:0"):
#based on code from: https://github.com/multimodallearning/voxelmorph/blob/mind_loss/pytorch/losses.py
    dy = (ddf[:, 1:, :, :, :] - ddf[:, :-1, :, :, :])**2
    dx = (ddf[:, :, 1:, :, :] - ddf[:, :, :-1, :, :])**2
    dz = (ddf[:, :, :, 1:, :] - ddf[:, :, :, :-1, :])**2

    d = torch.mean(dx) + torch.mean(dy) + torch.mean(dz)
    grad = d / 3.0
    return grad


def MINDSSC(img, radius=2, dilation=2, device="cuda:0"):
# Code from: https://github.com/multimodallearning/voxelmorph/blob/mind_loss/pytorch/losses.py
    kernel_size = radius * 2 + 1
    six_neighbourhood = torch.Tensor([[0,1,1],
                                      [1,1,0],
                                      [1,0,1],
                                      [1,1,2],
                                      [2,1,1],
                                      [1,2,1]]).long()
    dist = pdist_squared(six_neighbourhood.t().unsqueeze(0)).squeeze(0)
    x, y = torch.meshgrid(torch.arange(6), torch.arange(6))
    mask = ((x > y).view(-1) & (dist == 2).view(-1))
    idx_shift1 = six_neighbourhood.unsqueeze(1).repeat(1,6,1).view(-1,3)[mask,:]
    idx_shift2 = six_neighbourhood.unsqueeze(0).repeat(6,1,1).view(-1,3)[mask,:]
    mshift1 = torch.zeros(12, 1, 3, 3, 3).to(device)
    mshift1.view(-1)[torch.arange(12) * 27 + idx_shift1[:,0] * 9 + idx_shift1[:, 1] * 3 + idx_shift1[:, 2]] = 1
    mshift2 = torch.zeros(12, 1, 3, 3, 3).to(device)
    mshift2.view(-1)[torch.arange(12) * 27 + idx_shift2[:,0] * 9 + idx_shift2[:, 1] * 3 + idx_shift2[:, 2]] = 1
    rpad1 = nn.ReplicationPad3d(dilation)
    rpad2 = nn.ReplicationPad3d(radius)
    ssd = F.avg_pool3d(rpad2((F.conv3d(rpad1(img), mshift1, dilation=dilation) - F.conv3d(rpad1(img), mshift2, dilation=dilation)) ** 2), kernel_size, stride=1)
    mind = ssd - torch.min(ssd, 1, keepdim=True)[0]
    mind_var = torch.mean(mind, 1, keepdim=True)
    mind_var = torch.clamp(mind_var, mind_var.mean().item()*0.001, mind_var.mean().item()*1000)
    mind /= mind_var
    mind = torch.exp(-mind)
    mind = mind[:, torch.Tensor([6, 8, 1, 11, 2, 10, 0, 7, 9, 4, 5, 3]).long(), :, :, :]
    return mind

def pdist_squared(x):
# Code from: https://github.com/multimodallearning/voxelmorph/blob/mind_loss/pytorch/losses.py
    xx = (x**2).sum(dim=1).unsqueeze(2)
    yy = xx.permute(0, 2, 1)
    dist = xx + yy - 2.0 * torch.bmm(x.permute(0, 2, 1), x)
    dist[dist != dist] = 0
    dist = torch.clamp(dist.float(), 0.0, np.inf)
    return dist

def mind_loss(sources, targets, device="cuda:0", **params):
# Code from: https://github.com/multimodallearning/voxelmorph/blob/mind_loss/pytorch/losses.py
    try:
        dilation = params['dilation']
        radius = params['radius']
        return torch.mean((MINDSSC(sources, device=device, dilation=dilation, radius=radius) - MINDSSC(targets, device=device, dilation=dilation, radius=radius))**2)
    except:
        return torch.mean((MINDSSC(sources, device=device) - MINDSSC(targets, device=device))**2)